const {VK} = require('vk-io');
const {MessageContext} = require('vk-io');
const fs = require('fs')
const vk = new VK();
const {api} = vk;
const {updates} = vk;
const {upload} = vk;


/*https://api.vk.com/method/messages.getConversationsById?peer_ids=368418604,2000000041,-167824979&access_token=—Ç–æ–∫–µ–Ω&v=5.80*/


//–ù–µ —Ç—Ä–æ–≥–∞—Ç—å
const TOKEN = "—Ç–æ–∫–µ–Ω"

vk.setOptions({
    token: TOKEN
})


//–°–≤—è—Ç—ã–Ω—è
require('https').createServer().listen(process.env.PORT || 5000).on('request', function(req, res){
    res.end('')
});


updates.startPolling()

updates.use(async (context, next) => {
	if (context.is('message') && context.isOutbox()) {
		return;
	}

	try {
		await next();
	} catch (error) {
		console.error('Error:', error);
	}
});

//–ë–ª–æ–∫ –∫–æ–º–∞–Ω–¥
updates.hear('/start', async(context) => {
    await context.send('–≠–ª–¥–∂–µ–π –Ω–∞ —Å–≤—è–∑–∏. –í—å–µ—Ç–Ω–∞–º –ø–∞—Ä–∞—à–∞, –∫–æ—Ä–µ–Ω—å - –º–æ–π –±–∞—Ç—è!\n–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n/—Ä–æ—Ñ–ª - –ø–æ–ª—É—á–∏ —à—É—Ç–∫—É\n/—ç–ª–¥–∂–µ–π - –ø–æ–ª—É—á–∏ –ø–æ –µ–±–∞–ª—É\n/–∫—Ç–æ - —Ö–∑, –º–∏—Ä–æ—à –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞—Ü–µ–Ω–∏\n/–∫–æ—Ä–µ–Ω—å - –ø–æ—Ç—Ä–æ–ª–ª—å –ª–µ–≥–µ–Ω–¥—É')
})

updates.hear('/—Ä–æ—Ñ–ª', async(context) => { 
        await context.send('–†–æ—Ñ–ª —É —Ç–µ–±—è –≤ —à—Ç–∞–Ω–∞—Ö')
        console.log(context.getPeerId())    
})

updates.hear('/—ç–ª–¥–∂–µ–π', async(context) => {
    await context.send('–•–æ—Ç–∏—Ç–µ –ª—É—á—à–µ–π –º—É–∑—ã–∫–∏ –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ? \n/–¥–∞ - –Ω—É –≤—ã –ø–æ–Ω—è–ª–∏\n/–Ω–µ—Ç - –≤—ã —Ç–∞–º —á–æ –æ—Ö—É–µ–ª–∏? —Ç–æ–ª—å–∫–æ –¥–∞, –ø–∏–¥–æ—Ä–∞—Å—ã')
})

var songs = new Array(5)
songs[0] = 'audio371745447_456507674',
songs[1] = 'audio371745438_456563093',
songs[2] = 'audio371745430_456570060',
songs[3] =  'audio371745440_456390427',
songs[4] = 'audio371745451_456401507'


let k = songs[Math.floor(Math.random() * songs.length)]

updates.hear('/–¥–∞', async(context) =>{
    await Promise.all([
        context.send('–ù—É —Ç–æ–≥–¥–∞ –¥–µ—Ä–∂–∏ —Ç—Ä–µ–∫, —Å–ª–∞–¥–∫–∏–π'),
        context.send({
            attachment: k 
        })
    ])  
})

updates.hear('/–Ω–µ—Ç', async(context) =>{
    await Promise.all([
        context.send('–Ø –∂–µ —Å–∫–∞–∑–∞–ª:"—Ç–æ–ª—å–∫–æ –¥–∞". –¢—É–ø–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - —Å–æ—Å–∏ —Ö—É–π'),
        context.send({
            attachment: k 
        })
    ])  
})


var answers5 = new Array(3)
answers5[0] = '–ú–∞–º–∫–∞ —Ç–≤–æ—è, —Ä–∞—Å–ø–∏–∑–¥—è–π –µ–±–∞–Ω—ã–π'
answers5[1] = '–ë–∞—Ç—è —Ç–≤–æ–π, —Ö—É–π–ª–æ –æ–±–æ—Å—Å–∞–Ω–æ–µ'
answers5[2] = '–¢—ã, —á–º–æ—à–Ω–∏–∫'
var c = answers5[Math.floor(Math.random() * answers5.length)]
updates.hear(/\/–∫—Ç–æ (.+)/i, async(context) => {
    await context.send(c)
})

updates.hear(/\/–∫–æ—Ä–µ–Ω—å (.+)/i, async(context) => {
    await context.send('–ú–∞–º–∫–∞ –Ω–µ –ø—É—Å—Ç–∏–ª–∞')
})

//–ë–ª–æ–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
var reg1 = new Array(5);
reg1[0] = RegExp(/–ø–æ–ª–∏–Ω–∞/i);
reg1[1] = RegExp(/–ø–æ–ª–∏–Ω—ã/i);
reg1[2] = RegExp(/–ø–æ–ª–∏–Ω–µ/i);
reg1[3] = RegExp(/–ø–æ–ª–∏–Ω—É/i);
reg1[4] = RegExp(/–ø–æ–ª–∏–Ω–æ–π/i);
var answers1 = new Array(5);
answers1[0] = "–•–∞, —è –µ–±–∞–ª —Ç–∞–∫–∏—Ö —Ç–µ–ª–æ–∫ –µ—â–µ –≤ 2007";
answers1[1] = "–£ –ù–∞—Å—Ç–∏ –ò–≤–ª–µ–µ–≤–æ–π –¥–∞–∂–µ –Ω–µ —Ç–∞–∫";
answers1[2] = "–î–æ—Å—Ç–æ–π–Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã '–£—á–∏—Ç–µ–ª—å –ì–æ–¥–∞'";
answers1[3] = "–ù—É —Ö—É–π –∑–Ω–∞–µ—Ç, —è –±—ã –≤–¥—É–ª";
answers1[4] = "–ü–æ–ø—Ä–æ–±—É–π, –≤—ã–µ–±–∏ –µ–µ, –ª–æ—à–∞—Ä–∞";
var a = answers1[Math.floor(Math.random() * answers1.length)]
updates.hear(reg1, async(context) => {
    await context.send(a)
})


var reg2 = new Array(8);
reg2[0] = RegExp(/—Ñ–∞—Ä–∞–æ–Ω/i);
reg2[1] = RegExp(/pharaoh/i);
reg2[2] = RegExp(/—Ñ–∞—Ä–∞/i);
reg2[3] = RegExp(/—Ñ–∞—Ä–∞–æ—Ö–∞/i);
reg2[4] = RegExp(/—Ñ–∞—Ä–∞–æ–Ω–∞/i);
reg2[5] = RegExp(/—Ñ–∞—Ä–∞–æ–Ω—É/i);
reg2[6] = RegExp(/—Ñ–∞—Ä—ã/i);
reg2[7] = RegExp(/—Ñ–∞—Ä–µ/i);
var answers2 = new Array(2);
answers2[0] = "–•–ê–•–ê–ú–ï–†–¢–í–´–ï –ù–ê–ô–ö–ò –°–£–ö–ê –ï–ë–ê–¢–¨ –ú–ù–ï –ü–†–ï–¢ –£–• –û–•–£–ï–¢–¨. –ö–¢–û –¢–í–û–ô –ò–î–û–õ?";
answers2[1] = "–°–ö–†-–°–ö–†-–°–ö–†. –ß–µ, –ø–æ–¥—É–º–∞–ª, —á—Ç–æ –º–Ω–µ —ç—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è? –ï–±–∞—Ç—å —Ç—ã –¥–æ–ª–±–æ–µ–±, –±—Ä–∞—Ç–∏—à–∫–∞, –∑–µ–º–ª—è –ø—É—Ö–æ–º";
var b = answers2[Math.floor(Math.random() * answers2.length)]
updates.hear(reg2, async(context) => {
    await context.send(b)
})


var answers3 = new Array(5);
answers3[0] = "—É–µ–±–∞–Ω";
answers3[1] = "—É–µ–±–∞–Ω—É";
answers3[2] = "—É–µ–±–∞–Ω–∞";
answers3[3] = "—É–µ–±–∞–Ω–æ–º";
answers3[4] = "—É–µ–±–∞–Ω—ã";
updates.hear(answers3, async(context) => {
    await context.send('–ë–æ–π–∫–æ —á—Ç–æ –ª–∏?')
})

var reg3 = new RegExp(/–±–∞–∑–∞—Ä–∏—à—å/i)
updates.hear(reg3, async(context) => {
    await context.send('–ö–æ–Ω–µ—á–Ω–æ')
})



var reg4 = new Array(7)
reg4[0] = new RegExp(/–∫–∞–Ω–∞–≤–∞/i);
reg4[1] = new RegExp(/–∫–∞–Ω–∞–≤–µ/i);
reg4[2] = new RegExp(/–∫–∞–Ω–∞–≤—É/i);
reg4[3] = new RegExp(/–∫–∞–Ω–∞–≤—ã/i);
reg4[4] = new RegExp(/–æ—Ö—É–µ–Ω–µ–Ω–æ–∫/i);
reg4[5] = new RegExp(/–æ—Ö—É–µ–Ω–µ–Ω–∫–∞/i);
reg4[6] = new RegExp(/–º–∞—Ç—å/i);
updates.hear(reg4, async(context) => {
    await context.send('–¢—ã –±–ª—è, –ø–µ—Ä—Ö–æ—Ç—å –µ–±–∞–Ω–∞—è, —Å–æ–≤—Å–µ–º –Ω–∞—Ö—É–π –æ—Ö—É–µ–ª? –ü—Ä–∏–µ–¥—É —â–∞ –≤ —Ç–≤–æ–π –£—Å—Ç—å-–ø–∏–∑–¥–∏–Ω—Å–∫ –∏ –æ–±–æ—Å—Å—É, –ø–∞—Ä–∞—à–∞')
})



var reg5 = new Array(11)
reg5[0] = new RegExp(/–ª–µ–æ–Ω—ã—á–∞/i)
reg5[1] = new RegExp(/–ª–µ–æ–Ω—ã—á/i)
reg5[2] = new RegExp(/–≥–µ—Ä—ã—á/i)
reg5[3] = new RegExp(/–≥–µ—Ä—ã—á–∞/i)
reg5[4] = new RegExp(/–≥–µ—Ä—ã—á—É/i)
reg5[5] = new RegExp(/–≥–µ—Ä—ã—á–∞/i)
reg5[6] = new RegExp(/–ª–µ–æ–Ω—ã—á—É/i)
reg5[7] = new RegExp(/—Ö–∞—Ç–∞/i)
reg5[8] = new RegExp(/—Ö–∞—Ç—ã/i)
reg5[9] = new RegExp(/—Ö–∞—Ç—É/i)
reg5[10] = new RegExp(/—Ö–∞—Ç–µ/i)
var answers4 = new Array(4)
answers4[0] = '–ï–±–∞—Ç—å, —è —Ä–æ—Ñ–ª–∏–ª —Å —ç—Ç–æ–≥–æ –µ—â–µ –∫–æ–≥–¥–∞ –ö–µ–Ω–Ω–µ–¥–∏ –±—ã–ª –∂–∏–≤'
answers4[1] = '–ö—Ç–æ-—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å—ã–≥—Ä–∞—Ç—å –≤ Far Cry 5?'
answers4[2] = '–ú–Ω–µ —Ç–æ–∂–µ –∑–∏–º–æ–π —Ö–æ–ª–æ–¥–Ω–æ, –∞–≥–∞, –æ—Ö—É–µ—Ç—å, –ø—Ä–∞–≤–¥–∞?'
answers4[3] = '–ú–∞—Å–ª–µ–Ω–∏—Ü–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞, –µ–±–ª–∞–Ω—ã'
var q = answers4[Math.floor(Math.random() * answers4.length)]
updates.hear(reg5, async(context) =>{
    await Promise.all([
        context.send(q),
        context.send({
            attachment: 'photo-167824979_456239020'
        })
    ])  
})


var reg6 = new Array(9)
reg6[0] = new RegExp(/–ø–æ–ª–∫–æ–≤–Ω–∏–∫/i)
reg6[1] = new RegExp(/–ø–æ–ª–∫–æ–≤–Ω–∏–∫–∞/i)
reg6[2] = new RegExp(/–ø–æ–ª–∫–æ–≤–Ω–∏–∫—É/i)
reg6[3] = new RegExp(/–ª–µ—Ö–∞/i)
reg6[4] = new RegExp(/–ø–æ–ª–∫–æ–≤–Ω–∏–∫–µ/i)
reg6[5] = new RegExp(/–ø–æ–ª–∫–æ–≤–Ω–∏–∫–æ–º/i)
reg6[6] = new RegExp(/–ª–µ—Ö–µ/i)
reg6[7] = new RegExp(/–ª–µ—Ö—É/i)
reg6[8] = new RegExp(/–ª–µ—Ö–∏/i)
var answers6 = new Array(4)
answers6[0] = "–¢–∞–∫, –µ–±–∞—Ç—å. –ü–æ–ª–∫–æ–≤–Ω–∏–∫ —Ç–æ–ª—å–∫–æ —è, —Å—á–∏—Ç–∞–µ—à—å –∏–Ω–∞—á–µ - –ø—Ä–∏—à–ª—é —Ç—Ä–µ–∫ —ç–ª–¥–∂–µ—è, —Ö—É–µ—Å–æ—Å–∏–Ω–∞"
answers6[1] = "–í –∞—Ä–º–∏–∏ —Å–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø–∏–¥–æ—Ä–∞—Å—ã"
answers6[2] = "–û–Ω –≥—É–∫, –±–ª—è –±—É–¥—É"
answers6[3] = "–û–Ω –ø–æ–ª–∫–æ–≤–Ω–∏–∫, –∞ –≤—Å–µ –ø–∏–¥–æ—Ä—ã"
var j = answers6[Math.floor(Math.random() * answers6.length)]
updates.hear(reg6, async(context) => {
    await context.send(j)
})



var reg7 = new Array(9)
reg7[0] = new RegExp(/—Å—Ç–∞—Å/i)
reg7[1] = new RegExp(/—Å—Ç–∞—Å–∞/i)
reg7[2] = new RegExp(/—Å—Ç–∞—Å—É/i)
reg7[3] = new RegExp(/c—Ç–∞—Å–µ/i)
reg7[4] = new RegExp(/—Å—Ç–∞—Å–æ–º/i)
reg7[5] = new RegExp(/–∫–∞–∑–∞—Ö/i)
reg7[6] = new RegExp(/–∫–∞–∑–∞—Ö–∞/i)
reg7[7] = new RegExp(/–∫–∞–∑–∞—Ö—É/i)
reg7[8] = new RegExp(/–∫–∞–∑–∞—Ö–æ–º/i)
var answers7 = new Array(3)
answers7[0] = "–ú–µ–Ω —Å–µ–Ω—ñ –∞—É–∑—ã–º–∞ —Å–∞–ª–¥—ã–º, –∞–Ω—Ç–∏—Ö–∞–π–ø"
answers7[1] = "–õ—É—á—à–∞—è —Ç—Ä–∞–≤–∞ —Ä–∞—Å—Ç–µ—Ç —É –º–æ–µ–π –±–∞–±–∫–∏ –Ω–∞ –æ–≥–æ—Ä–æ–¥–µ, —Ç–∞–∫–æ–µ –¥–∞–∂–µ –∫–∞–∑–∞—Ö–∞–º –Ω–µ —Å–Ω–∏–ª–æ—Å—å"
answers7[2] = "–ö–∞–∑–∞—Ö–∏ - –ª—É—á—à–∏–µ –ª—é–¥–∏. –°—á–∏—Ç–∞–µ—à—å –∏–Ω–∞—á–µ? –ó–∞ —Ç–æ–±–æ–π —É–∂–µ –≤—ã–µ—Ö–∞–ª –±—É–º–µ—Ä —Å–æ –°—Ç–∞—Å–æ–º –∏ —à–ª—é—Ö–∞–º–∏"
var huy = answers7[Math.floor(Math.random() * answers7.length)]
updates.hear(reg7, async(context) => {
    await context.send(huy)
})



updates.hear('—Ö—É–µ–≤–æ', async(context) => {
    await context.send('–ñ–∏–∑–∞, –º–Ω–µ —Ç–æ–∂–µ —á–µ—Ç —Ö—É–µ–≤–æ –∏–Ω–æ–≥–¥–∞. –ü–µ—á–∞–ª—å–Ω–æ, –≤ –æ–±—â–µ–º')
})

updates.hear('–∫–µ–∫', async(context) => {
    await context.send('–•—É–µ–∫, –¥–æ–ª–±–æ–µ–± —Ç—É–ø–æ–π')
})


var reg8 = new Array(5)
reg8[0] = new RegExp(/–º–∞–∫/i)
reg8[1] = new RegExp(/–º–∞–∫–∞/i)
reg8[2] = new RegExp(/–º–∞–∫—É/i)
reg8[3] = new RegExp(/–º–∞–∫–µ/i)
reg8[4] = new RegExp(/–º–∞–∫–æ–º/i)
var answers8 = new Array(3)
answers8[0] = "–§–°–ë –°–£–ö–ê –í–û–†–í–ê–õ–°–Ø –í –≠–¢–£ –ë–ï–°–ï–î–£ –ò –ò–©–ï–¢ –ê–ù–ò–ú–ï-–î–†–û–ß–ï–†–ê. –ü–†–û–ô–î–ï–ú–¢–ï –ù–ê–•–£–ô"
answers8[1] = "–¢–æ–≤–∞—Ä–∏—â –º–∞–π–æ—Ä —Ç–æ–∂–µ –æ—Ü–µ–Ω–∏–ªüåö"
answers8[2] = "–¢–∞–∫—Å-—Ç–∞–∫—Å, —à–æ —Ç—É—Ç —É –Ω–∞—Å. –ê–∞–∞, –¥–æ —ç—Ç–æ –∂–µ —É–≥–æ–ª–æ–≤–æ—á–∫–∞"
var g = answers8[Math.floor(Math.random() * answers8.length)]
updates.hear(reg8, async(context) => {
    await context.send(g)
})

updates.hear(/–º–µ–º/i, async(context) => {
    await context.send('–í—Å—è —Ç–≤–æ—è –∂–∏–∑–Ω—å - –æ–¥–∏–Ω —Å–ø–ª–æ—à–Ω–æ–π –º–µ–º, –ª–æ—à–∞—Ä–∞')
})

var reg9 = new Array(4)
reg9[0] = new RegExp(/–æ—Ä/i)
reg9[1] = new RegExp(/–æ—Ä—É/i)
reg9[2] = new RegExp(/–æ—Ä–µ–π—Ä–æ/i)
reg9[3] = new RegExp(/–æ—Ä–µ–æ/i)
updates.hear(reg9, async(context) => {
    const voicekek = 'https://psv4.userapi.com/c628603/u204071062/audiomsg/d2/7377219a92.mp3'
    await Promise.all([
        context.sendVoice(voicekek)
    ])  
})

var reg10 = new Array(3)
reg10[0] = new RegExp(/–ú–∏–ª–æ–≤–∞/i)
reg10[1] = new RegExp(/–º–∏–ª–æ–≤–æ–π/i)
reg10[2] = new RegExp(/–º–∏–ª–æ–≤—É/i)
var answers9 = new Array(4)
answers9[0] = "–ù–ï –ï–ë–ò–¢–ï –ú–ò–õ–û–í–£ - –õ–ï–ß–ò–¢–¨–°–Ø –£ –í–ï–ù–ï–†–û–õ–û–ì–ê –ë–£–î–ï–¢–ï, –ì–õ–£–ü–¶–´"
answers9[1] = "–Ø –µ–±–∞–ª —Ç–∞–∫–∏—Ö —Ç–µ–ª–æ–∫ –µ—â–µ –∫–æ–≥–¥–∞ –ü–æ–ª–∫–æ–≤–Ω–∏–∫ –≤ –ª–µ–≥–æ –∏–≥—Ä–∞–ª"
answers9[2] = "8 –ú–∞–∫–æ–≤ –∏–∑ 10"
answers9[3] = "–°–£–ö–ê –û–ù–ê –†–ï–ë–ï–ù–û–ö"
answers9[4] = "–ù–ê –•–£–ô –û–ù–ê –í–ê–ú –°–î–ê–õ–ê–°–¨? –õ–£–ß–®–ï –ë–´ –ú–ù–ï –ù–ê –•–£–ô –£–ü–ê–õ–ê"
var l = answers9[Math.floor(Math.random() * answers9.length)]
updates.hear(reg10, async(context) => {
    await context.send(l)
})